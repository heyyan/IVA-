@page "/"
@using SearchApp.Models
@using SearchApp.Services
@inject IVideoSearch videoSearch
@using BlazorPagination

@*<div class="container">
    <div class="row">
    <img class="centerMiddle align-items-center justify-content-center" src="/images/logo-dark-sticky.png" alt="Logo" style="height: 100%;">
    </div>
    </div>*@
<EditForm Model="@SearchData" class="centerMiddle">
    <div class="searchBoxForm">
        <InputText @bind-Value="SearchText" class="searchBox"></InputText>
        <input class="searchBoxSubmit" @onclick="@(e => SearchPager(0.ToString(), SearchText))">
    </div>
</EditForm>

@if (Loading)
{
    <div class="spinner d-flex align-items-center justify-content-center fixedSpinner">
        <div class="spinner-border text-success" role="status">
            <span class="sr-only"></span>
        </div>
    </div>
}

<div class="container">
    <div class="row">
        <div class="col">
            @if (SearchData.Root.Total != null && int.Parse(SearchData.Root.Total) > 0)
            {
                <table class="table">
                    <tbody>
                        @foreach (var result in SearchData.Root.Hits)
                        {
                            <tr>
                                <td>@result.Source.Title</td>
                                <td>@result.Source.Year</td>
                                @*<td>@result.IvaRating</td>
                                    <td>@result.Year</td>*@
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>

    </div>

</div>
<div class="container">
    <div class="row">
        <div class="col">
            @if (SearchData.Root.Total != null && int.Parse(SearchData.Root.Total) > 0)
            {
                <table class="col">
                    <tr class="col">
                        <td>
                            @if (SearchData.CurrentPage > 0)
                            {
                                <p class="pageButton">
                                    <button class="btn btn-link"
                                    @onclick="@(e => SearchPager(0.ToString(), SearchData.SearchText))">
                                        |&#60;
                                    </button>
                                </p>
                            }
                            else
                            {
                                <p class="pageButtonDisabled">|&lt;</p>
                            }
                        </td>

                        <td>
                            @if (SearchData.CurrentPage > 0)
                            {
                                var prev = "prev";
                                <p class="pageButton">
                                    <button class="btn btn-link" @onclick="@(e => SearchPager(prev, SearchData.SearchText))">&#60;</button>
                                </p>
                            }
                            else
                            {
                                <p class="pageButtonDisabled">&lt;</p>
                            }
                        </td>

                        @for (var pn = SearchData.LeftMostPage; pn < SearchData.LeftMostPage + SearchData.PageRange; pn++)
                        {
                            <td>
                                @if (SearchData.CurrentPage == pn)
                                {
                                    <p class="pageSelected">@(pn + 1)</p>
                                }
                                else
                                {
                                    <p class="pageButton">
                                        @{
                                            var p1 = SearchData.PageCount - 1;
                                            var plink = pn.ToString();
                                        }
                                        <button class="btn btn-link"
                                    @onclick="@(e => SearchPager(plink, SearchData.SearchText))">
                                            @(pn + 1)
                                        </button>
                                    </p>
                                }
                            </td>

                        }

                        <td>
                            @if (SearchData.CurrentPage < SearchData.PageCount - 1)
                            {

                                <p class="pageButton">
                                    @{
                                        var p1 = SearchData.PageCount - 1;
                                        var next = "next";
                                    }
                                    <button class="btn btn-link"
                                    @onclick="@(e => SearchPager(next, SearchData.SearchText))">
                                        &#62;
                                    </button>
                                </p>
                            }
                            else
                            {
                                <p class="pageButtonDisabled">&gt;</p>
                            }
                        </td>

                        <td>
                            @if (SearchData.CurrentPage < SearchData.PageCount - 1)
                            {
                                <p class="pageButton">
                                    @{
                                        var p7 = SearchData.PageCount - 1;
                                    }
                                    <button class="btn btn-link"
                                    @onclick="@(e => SearchPager(p7.ToString(), SearchData.SearchText))">
                                        &#62;|
                                    </button>
                                </p>
                            }
                            else
                            {
                                <p class="pageButtonDisabled">&gt;|</p>
                            }
                        </td>
                    </tr>
                </table>
            }
        </div>

    </div>

</div>
@code {

    private bool Loading { get; set; } = false;
    private SearchDataDto SearchData { get; set; } = new SearchDataDto();
    public string SearchText { get; set; }
    private int PageNo { get; set; }

    private async Task SearchPager(string paging, string searchText)
    {

        SearchData.Paging = paging.ToString();
        SearchData.SearchText = searchText;
        await Search();
    }


    private async Task Search()
    {
        Loading = true;
        int page;

        switch (SearchData.Paging)
        {
            case "prev":
                page = PageNo - SearchData.PageSize;
                break;

            case "next":
                page = PageNo + SearchData.PageSize;
                break;

            default:
                page = int.Parse(SearchData.Paging);
                break;
        }

        int leftMostPage = SearchData.LeftMostPage;

        SearchData.Root = await videoSearch.Search(SearchText,page.ToString(),SearchData.PageSize.ToString());
        SearchData.CurrentPage = 1;
        SearchData.PageCount = int.Parse(SearchData.Root.Total);
        Loading = false;
    }
}